# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SAS_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pymeshlab, sys, os, glob, time, pathlib, argparse
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QDialog, QApplication
from PyQt5.uic import loadUi
import numpy as np
import pandas as pd

def load_joint_points(subdir):
    # get filepaths for each of the joint file
    filepaths = glob.glob(os.path.join(subdir, "joints_*.csv"))  
    # combine the three files into one dataframe
    df_from_each_file = (pd.read_csv(f, header=None) for f in filepaths)
    concatenated_df = pd.concat(df_from_each_file, ignore_index=True)
    print("Joint points loaded successfully")
    # return a numpy array
    return concatenated_df.to_numpy()

def load_meshes(subdir):
    # create a new MeshSet
    ms = pymeshlab.MeshSet()
    # load meshes
    filepaths = glob.glob(os.path.join(subdir, "scan_*.ply"))  
    for filepath in filepaths:
        ms.load_new_mesh(filepath)
    # flatten visible layers - combine all meshes
    ms.flatten_visible_layers(alsounreferenced = True)
    print("Scan meshes loaded successfully")
    # return MeshSet
    return ms

def remove_background(joint_arr, ms, radius):
    # get a reference to the current mesh
    # store the scan mesh id and number of vertices for the hausdorff function
    m = ms.current_mesh()
    scan_mesh_id = ms.current_mesh_id()
    sample_num = m.vertex_number()
    print(f'Total vertices: {m.vertex_number()}')

    # create a new mesh with the joint points
    m = pymeshlab.Mesh(vertex_matrix = joint_arr)
    ms.add_mesh(m)
    joint_mesh_id = ms.current_mesh_id()

    # set current mesh back to the scan mesh
    ms.set_current_mesh(scan_mesh_id)
    m = ms.current_mesh()
    # Hausdorff Distance filter will store into the "quality" for each vertex of A the distance from the closest vertex of B; 
    # then use the conditional selection filter by testing against quality to remove background vertices.
    ms.hausdorff_distance(sampledmesh = scan_mesh_id, targetmesh = joint_mesh_id, samplenum = sample_num, maxdist = radius)
    ms.conditional_vertex_selection(condselect = f"(q >= {radius})")
    ms.delete_selected_vertices()
    print(f'Keeping {m.vertex_number()} vertices')

def export_mesh(subdir, ms, p):
    # compute normals for the points. use smooth iteration number 2.
    ms.compute_normals_for_point_sets(smoothiter = p.smoothiter)
    # reconstruct points as a surface using the Poisson method. use default parameters for now. 
    ms.surface_reconstruction_screened_poisson()

    # print out default value for 'select_faces_with_edges_longer_than' function
    default_params = ms.filter_parameter_values('select_faces_with_edges_longer_than')
    print(f"Default threshold: {default_params['threshold']}")

    # select interpolated faces. use 15 mm as a selection criterion.
    ms.select_faces_with_edges_longer_than(threshold = p.edgeLength)
    ms.delete_selected_faces()
    ms.remove_unreferenced_vertices()

    # save mesh
    basename = os.path.split(os.path.split(subdir)[0])[1] # extract second last directory name
    complete_name = os.path.join(p.output, basename + '_processed.ply')
    ms.save_current_mesh(complete_name)
    ms.clear()
    print("Saved!")
    
class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        loadUi("SAS_GUI.ui", self)
        self.inputPath = ""
        self.outputPath = ""
        self.pushButton_inputDir.clicked.connect(self.getInputFilePath)
        self.textBrowser_inputDir.textChanged.connect(self.textBrowserDir_state_changed)
        self.checkBox_saveToSameDir.stateChanged.connect(self.checkBoxDir_state_changed)
        self.pushButton_outputDir.clicked.connect(self.getOutputFilePath)
        self.textBrowser_outputDir.textChanged.connect(self.textBrowserDir_state_changed)

    def getInputFilePath(self):
        response = QFileDialog.getExistingDirectory(self.pushButton_inputDir, "Open Directory",
                                                os.getcwd(),
                                                QFileDialog.ShowDirsOnly
                                                | QFileDialog.DontResolveSymlinks)
        self.inputPath = response
        self.textBrowser_inputDir.setText(response)
        if self.checkBox_saveToSameDir.isChecked():
            self.outputPath = response
            self.textBrowser_outputDir.setText(response)

    def getOutputFilePath(self):
        response = QFileDialog.getExistingDirectory(self.pushButton_outputDir, "Open Directory",
                                                os.getcwd(),
                                                QFileDialog.ShowDirsOnly
                                                | QFileDialog.DontResolveSymlinks)
        self.textBrowser_outputDir.setText(response)
        self.outputPath = response

    def disableButton(self, button):
        button.setEnabled(False)

    def enableButton(self, button):
        button.setEnabled(True)

    def checkBoxDir_state_changed(self, int):
        if self.checkBox_saveToSameDir.isChecked():
            self.outputPath = self.inputPath
            self.textBrowser_outputDir.setText(self.inputPath)
            self.disableButton(self.pushButton_outputDir)
        else:
            self.enableButton(self.pushButton_outputDir)

    def textBrowserDir_state_changed(self):
        
        if (self.inputPath and self.outputPath):
            self.pushButton_start.setEnabled(True)
        else:
            self.pushButton_start.setEnabled(False)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = QtWidgets.QStackedWidget()
    mainwindow = MainWindow()
    widget.addWidget(mainwindow)
    widget.show()
    sys.exit(app.exec_())
